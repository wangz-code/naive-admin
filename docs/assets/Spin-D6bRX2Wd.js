import{x as n,y as e,cf as s,P as t,d as i,C as o,A as a,dF as r,l,aU as c,X as d,F as p,c as u,a0 as m,s as f,aX as v,T as h}from"./index-MskScSmw.js";import{u as y}from"./use-compitable-CLINQHNu.js";const g=n([n("@keyframes spin-rotate","\n from {\n transform: rotate(0);\n }\n to {\n transform: rotate(360deg);\n }\n "),e("spin-container","\n position: relative;\n ",[e("spin-body","\n position: absolute;\n top: 50%;\n left: 50%;\n transform: translateX(-50%) translateY(-50%);\n ",[s()])]),e("spin-body","\n display: inline-flex;\n align-items: center;\n justify-content: center;\n flex-direction: column;\n "),e("spin","\n display: inline-flex;\n height: var(--n-size);\n width: var(--n-size);\n font-size: var(--n-size);\n color: var(--n-color);\n ",[t("rotate","\n animation: spin-rotate 2s linear infinite;\n ")]),e("spin-description","\n display: inline-block;\n font-size: var(--n-font-size);\n color: var(--n-text-color);\n transition: color .3s var(--n-bezier);\n margin-top: 8px;\n "),e("spin-content","\n opacity: 1;\n transition: opacity .3s var(--n-bezier);\n pointer-events: all;\n ",[t("spinning","\n user-select: none;\n -webkit-user-select: none;\n pointer-events: none;\n opacity: var(--n-opacity-spinning);\n ")])]),b={small:20,medium:18,large:16},z=i({name:"Spin",props:Object.assign(Object.assign({},a.props),{contentClass:String,contentStyle:[Object,String],description:String,stroke:String,size:{type:[String,Number],default:"medium"},show:{type:Boolean,default:!0},strokeWidth:Number,rotate:{type:Boolean,default:!0},spinning:{type:Boolean,validator:()=>!0,default:void 0},delay:Number}),setup(n){const{mergedClsPrefixRef:e,inlineThemeDisabled:s}=o(n),t=a("Spin","-spin",g,r,n,e),i=l((()=>{const{size:e}=n,{common:{cubicBezierEaseInOut:s},self:i}=t.value,{opacitySpinning:o,color:a,textColor:r}=i;return{"--n-bezier":s,"--n-opacity-spinning":o,"--n-size":"number"==typeof e?c(e):i[d("size",e)],"--n-color":a,"--n-text-color":r}})),f=s?p("spin",l((()=>{const{size:e}=n;return"number"==typeof e?String(e):e[0]})),i,n):void 0,v=y(n,["spinning","show"]),h=u(!1);return m((e=>{let s;if(v.value){const{delay:t}=n;if(t)return s=window.setTimeout((()=>{h.value=!0}),t),void e((()=>{clearTimeout(s)}))}h.value=v.value})),{mergedClsPrefix:e,active:h,mergedStrokeWidth:l((()=>{const{strokeWidth:e}=n;if(void 0!==e)return e;const{size:s}=n;return b["number"==typeof s?"medium":s]})),cssVars:s?void 0:i,themeClass:null==f?void 0:f.themeClass,onRender:null==f?void 0:f.onRender}},render(){var n,e;const{$slots:s,mergedClsPrefix:t,description:i}=this,o=s.icon&&this.rotate,a=(i||s.description)&&f("div",{class:`${t}-spin-description`},i||(null===(n=s.description)||void 0===n?void 0:n.call(s))),r=s.icon?f("div",{class:[`${t}-spin-body`,this.themeClass]},f("div",{class:[`${t}-spin`,o&&`${t}-spin--rotate`],style:s.default?"":this.cssVars},s.icon()),a):f("div",{class:[`${t}-spin-body`,this.themeClass]},f(v,{clsPrefix:t,style:s.default?"":this.cssVars,stroke:this.stroke,"stroke-width":this.mergedStrokeWidth,class:`${t}-spin`}),a);return null===(e=this.onRender)||void 0===e||e.call(this),s.default?f("div",{class:[`${t}-spin-container`,this.themeClass],style:this.cssVars},f("div",{class:[`${t}-spin-content`,this.active&&`${t}-spin-content--spinning`,this.contentClass],style:this.contentStyle},s),f(h,{name:"fade-in-transition"},{default:()=>this.active?r:null})):r}});export{z as _};
